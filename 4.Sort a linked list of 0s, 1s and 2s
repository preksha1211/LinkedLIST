(two pass solution ,data replacement)
class Solution {
    public Node segregate(Node head) {
        int one=0;
        int two=0;
        int zero=0;
        Node temp=head;
        while(temp!=null){
            if(temp.data==0){
                zero++;
            }
            else if(temp.data==1){
                one++;
            }
            else{
                two++;
            }
            temp=temp.next;
        }
        temp=head;
        while(temp!=null){
            if(zero>0){
                temp.data=0;
                zero--;
            }
            else if(one>0){
                temp.data=1;
                one--;
            }
            else{
                temp.data=2;
                two--;
            }
            temp=temp.next;
        }
        return head;
        
    }
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
optimized(one pass solution && constant auxillary space)

class Solution {
    public Node segregate(Node head) {
        Node zeroDummy = new Node(-1);
        Node oneDummy = new Node(-1);
        Node twoDummy = new Node(-1);

        Node zero = zeroDummy, one = oneDummy, two = twoDummy;
        Node temp = head;

        
        while (temp != null) {
            if (temp.data == 0) {
                zero.next = temp;
                zero = zero.next;
            } else if (temp.data == 1) {
                one.next = temp;
                one = one.next;
            } else {
                two.next = temp;
                two = two.next;
            }
            temp = temp.next;
        }
                 
        
        one.next = twoDummy.next;   
        zero.next = oneDummy.next; 
        two.next = null;

        
        return zeroDummy.next;
    }
}
